---
- name: "configuration play." 
  hosts: web
  remote_user: ubuntu
  become: true
  become_method: sudo
  become_user: root
  gather_facts: false
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_host_key_checking: false
    - ansible_stdout_callback: yaml
    - os_environment:
      - key: NODE_ENV
        value: "production"
      - key: VERSION
        value: "1"
      - key: TYPEORM_CONNECTION
        value: postgres
      - key: TYPEORM_MIGRATIONS_DIR
        value: ./migrations
      - key: TYPEORM_ENTITIES
        value: ./modules/domain/**/*.entity{.ts,.js}
      - key: TYPEORM_MIGRATIONS
        value: ./src/migrations/*{.ts,.js}
      - key: TYPEORM_HOST
        value: "{{ lookup('env', 'TYPEORM_HOST') }}"
      - key: TYPEORM_PORT
        value: "{{ lookup('env', 'TYPEORM_PORT') }}"
      - key: TYPEORM_USERNAME
        value: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
      - key: TYPEORM_PASSWORD
        value: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
      - key: TYPEORM_DATABASE
        value: "{{ lookup('env', 'TYPEORM_DATABASE') }}"

  pre_tasks:
    - name: "wait 600 seconds for target connection to become reachable/usable."
      wait_for_connection:
        timeout: 200

    - name: "install python for Ansible."
      become: true
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3)
      changed_when: false

  tasks:
    - name: customize /etc/environment
      ansible.builtin.lineinfile:
        dest: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_items: "{{ os_environment }}"

    - setup:

  roles:
    - deploy

  
